stages:
- test
- build
- deploy

lint-job:
  stage: test
  image: golang:alpine
  before_script:
  - go mod download
  - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
  script:
  # - golangci-lint run ./...
  - echo "linting"
  except:
    changes:
    - README.md

test-job:
  stage: test
  image: golang:alpine
  before_script:
  - go mod download
  script:
  - go test ./...
  except:
    changes:
    - README.md



build-job:
  stage: build
  image: docker
  services:
  - docker:dind
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE
    PASSWORD: $PRIVATE_TOKEN
    LOGIN: $USER
  script:
  - docker login -u $LOGIN -p $PASSWORD $CI_REGISTRY
  - docker build . -t $IMAGE_NAME:latest -f Dockerfile
  - docker push $IMAGE_NAME:latest
  - docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CI_COMMIT_SHORT_SHA
  - docker push $IMAGE_NAME:$CI_COMMIT_SHORT_SHA
  - |
    if [ "$CI_COMMIT_TAG" != "" ]; then
      docker tag $IMAGE_NAME:latest $IMAGE_NAME:$CI_COMMIT_TAG
      docker push $IMAGE_NAME:$CI_COMMIT_TAG
    fi
  tags:
  - gitlab-org-docker
  only:
    refs:
    - main
    - tags
  except:
    changes:
    - README.md


deploy-job:
  stage: deploy
  image: docker:latest
  services:
  - docker:dind
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE
    PASSWORD: $PRIVATE_TOKEN
    LOGIN: $USER
  before_script:
  - docker login -u $LOGIN -p $PASSWORD $CI_REGISTRY
  script:
  - |
    if [ "$CI_COMMIT_TAG" != "" ]; then
      IMAGE_NAME=$IMAGE_NAME:$CI_COMMIT_TAG docker compose up -d
    elif [ "$CI_COMMIT_TAG" == "" ]; then
      IMAGE_NAME=$IMAGE_NAME:$CI_COMMIT_SHORT_SHA docker compose up -d
    fi
  tags:
  - gitlab-org-docker
  only:
    refs:
    - main
    - tags
  except:
    changes:
    - README.md
